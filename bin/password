#!/usr/bin/env bash
#
# Copyright 2013-2019 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# exit if an uninitialised variable is used
#set -o nonunset
# exit of statement returns a non-true return value
#set -o errexit

VERSION=0.1

# Filename of this script
SCRIPT=${0##*/}

# Help text for this script
HELP="Usage: $SCRIPT (e)edit|(l)ist|(p)aste|(s)how|(g)en [ARGUMENT]"

# enable line numbers for debug output
if [ "$_DEBUG" = "true" ] ; then
  export PS4='(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]}-[${SHLVL},${BASH_SUBSHELL},$?] '
fi

function _debug() {
  if [ "$_DEBUG" = "true" ]; then
    echo 1>&2 "Debug: $@"
  fi
}

function _error() {
        echo 1>&2 "Error: $@"
        echo "$HELP"
        exit 1
}

# make sure the dependency programs are installed
for cmd in ccrypt xclip ; do
        if ! command -v $cmd |: ; then
                _error "$cmd not installed"
        fi
done

# check if the required environment variable is st
[ -z "$PASSWORD_PATH" ] && _error "PASSWORD_PATH not set!"

function list() {
        ccrypt -c $PASSWORD_PATH | cut -d'|' -f1 | sed '/^ *$/d' | sort
}

function show() {
        # name of the password key expected
        [ -z "$1" ] &&  _error "Which password to show?"
        # decrypt the password file and find the password
        local pass
        # read the password file
        pass=$(ccrypt -c $PASSWORD_PATH)
        # if successful 
        if [ $? -eq 0 ]
        then
                # find the password requested
                pass=$( echo "$pass" | grep "^$1")
                # if the password is missing
                [ -z "$pass" ] && _error "password $1 not existing"
                # strip the password key
                echo $pass | cut -d'|' -f2 | tr -d ' '
        fi
}

function paste() {
        # read the password
        local pass=$(show "$@") 
        local session=$(echo $XDG_SESSION_TYPE)
        case $session in
        wayland)
                wl-copy --paste-once $pass
                ;;
        x11)
                # strip `\n`, and paste to the clipboard
                echo $pass | tr -d '\n' | xclip -selection clipboard
                # empty the clipboard after 30 seconds
                (sleep 30; echo '' | xclip -selection clipboard) &
                ;;
        *)
                echo $session no supported!
                ;;
        esac
}

function edit() {
        ccrypt -d $PASSWORD_PATH
        $EDITOR ${PASSWORD_PATH%.cpt}
        ccrypt -e ${PASSWORD_PATH%.cpt}
}


#
# Generate a random password
#
function gen() {
        # length of the password as first argument
        local num=${1:-10}
        num=$(( num/2 ))
        # get pseudo-random bytes as hex string
        openssl rand -hex $num
}

# Read the command-line arguments
_command=$1 ; shift
case "$_command" in 
        list|l) list ;;
        paste|p) paste "$@" ;;
        show|s) show "$@" ;;
        edit|e) edit ;;
        gen|g) gen "$@" ;;
        *) echo "$HELP" ;;
esac

exit 0


