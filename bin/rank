#!/usr/bin/env ruby
#
# Copyright 2016-2021 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

class System 
  
  def self.exec(command)
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end

end

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Rank files within a directory numerically

#{exec_name} [-dlhvs] [<file> <rank>]

  file             name of the file
  rank             numerical rank of the file
  --debug, -d      show stacktraces in case of errors.
  --list, -l       list files in ranked order
  --help, -h       show this help information.
  --show, -s       show rank of each file
  --version, -v    print version number.
EOF

def link_rank(file,rank)
  Dir.chdir $options.path
  if File.symlink? rank
    target = File.readlink(rank)
    System::exec "rm #{rank}"
    link_rank(target, rank.to_i.next.to_s) 
  end
  file = File.join '..', File.basename(file)
  System::exec "ln -s #{file} #{rank}"
end

def show_rank
  Dir.chdir $options.path
  Dir.glob("[0-9]*").sort_by(&:to_i).each do |rank|
    $stdout.puts "#{rank} -> #{File.basename(File.readlink(rank))}"
  end
end

def list_files
  Dir.chdir $options.path
  ranking = Dir.glob("[0-9]*").sort_by(&:to_i).map! do |rank|
    File.basename File.readlink(rank)
  end
  $stdout.puts ranking.join(' ')
end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.debug = false
  $options.show = false
  $options.path = "#{ENV['PWD']}/.rank"

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--list','-l',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--show','-s',GetoptLong::NO_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--list'
      list_files
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--show'
      $options.show = true
    when '--version'
      $stdout.puts 0.2
      exit 0
    end
  end
  
  System::exec "mkdir #{$options.path}" unless File.directory? $options.path

  if $options.show
    show_rank
    exit 0
  end

  # make file listing default
  if ARGV.length == 0
    list_files
    exit 0
  end

  file = ARGV.shift || raise("Specify a file to rank")
  raise("File #{file} not existing") unless File.exists? file
  rank = ARGV.shift || raise("Specify ranking of file")

  link_rank(file,rank) 

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
