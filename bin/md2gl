#!/usr/bin/env ruby

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<arguments>]

<command>
   List commands

<options>
  -d, --debug                           Show stacktraces in case of errors.
  -h, --help                            Show this help information.
  -i, --image_root <path>               Path to the images for the gallery.
  -O, --output-to-file                  Write output to HTML file
  -v, --version                         Print version number.
EOF

$html = ""


def header(line)
  line.delete('#')
end

def html_image(image, css)
  src = image[:image]
  link = image[:link]
  options = "target=_blank rel=noopener"
  if link.nil?
    link = src
  else
    options << %Q{ title="#{link}"}
  end
  $html << %Q{<a href="#{link}" #{options}><img style="#{css}" src="#{src}"></a>\n}
end

def gallery(images) 
 
  case images.length
  when 2
    width = 50
  when 3
    width = 33.33
  when 4
    width = 25
  when 5
    width = 20
  when 6
    width = 16.66
  when 7
    width = 14.28
  when 8
    width = 12.5
  when 9
    width = 11.11
  when 10
    width = 10
  when 11
    width = 9.09
  when 12
    width = 8.33
  else
    width = 100
  end

  options = "width:#{width}%; float:left"

  html_image(images.first, "#{options}; clear:left")

  images[1..-1].each do |image|
    html_image(image, "#{options}; float:left ")
  end

end

def read_file(file)

$html = %q{
<html>
<head>
<style>
  html { background-color: black; color: lightgray; }
  body { margin: 0; }   
  h1 { 
    width: 100%;
    float: left;
    clear: float;
    vertical-align: middle;
    margin-left: 40px; 
    padding: 0; 
  }
  h2 { 
    font-size: 1.7em;
    width: 100%;
    float: left;
    clear: float;
    vertical-align: middle;
    margin-left: 40px; 
  }
  h3 { 
    font-size: 1.5em;
    width: 100%;
    float: left;
    clear: float;
    vertical-align: middle;
    margin-left: 3em; 
  }
  img {
    padding: 0em;
  }

</style>
</head>
<body>
}
  images = []
  File.readlines(file, chomp: true).each do |line|
    case line
    when /^$/ # empty lines
      gallery(images)unless images.empty?
      images = []
      $html << "\n" 
    when /^###/
      $html << "<h3>#{header(line)}</h3>"
    when /^##/
      $html << "<h2>#{header(line)}</h2>"
    when /^#/
      $html << "<h1>#{header(line)}</h1>"
    when /\-\-\-/
      next
    when /.*\.jpg$/
      line = line.gsub(/\s+/, " ")
      $logger.debug "#{line}"
      image, link = line.split(" ") 
      image = "#{$options.image_root}/#{image}"
      $logger.debug "#{image}"
      if File.exist?(image)
        images << { image: image, link: link }
      else
        puts "#{image} missing"
      end
    # paragraph
    else
      $html << "<p>#{line}</p>"
    end
  end

  gallery(images)unless images.empty?

  $html << "</body></html>"

end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.debug = false
  $options.output_to_file = false
  $options.image_root = ENV['PWD']

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--image-root','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--output-to-file','-O',GetoptLong::NO_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--image-root'
      $options.image_root = arg
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--output-to-file'
      $options.output_to_file = true
    when '--version'
      $stdout.puts 0.2
      exit 0
    end
  end

  files = []
  if File.directory?(ARGV[0])
    files = Dir.glob("#{ARGV[0]}/**/*.md")
  elsif File.exist?(ARGV[0])
    files << ARGV[0]
  else
    raise "Path #{ARGV[0]} not existing!"
  end

  files.each do |file|

    read_file(file)

    if $options.output_to_file
      directory = File.dirname(file)
      name = File.basename(file, '.md')
      output = "#{directory}/#{name}.html"
      File.open(output, 'w') do |f|
        f.write($html)
      end
      puts "#{output}"
    else
      puts "#{$html}"
    end

  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
