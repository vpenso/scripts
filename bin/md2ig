#!/usr/bin/env bash

# script exits on the first unset variable encountered
#set -u    # nounset
# script stops on first command failure
set -e    # errexit
# ensures that if any command in a set of piped commands failed, the overall
# exit status is the status of the failed command
set -o pipefail

VERSION=0.1

# Filename of this script
SCRIPT=${0##*/}

# Help text for this script
HELP=\
"usage: $SCRIPT [<options>] index_file

Add more text here

  index_file           Path to the index file

optional arguments:
  -d, --debug          enable verbose output
  -h, --height <size>  height of the HTML image
  -H, --help           show this help message
  --version            program version number "

function _debug() {
        if [ "$_DEBUG" = "true" ]; then
                echo 1>&2 "Debug: $@"
        fi
}

function _error() {
        echo 1>&2 "Error: $@"
	exit 1
}

#
# Defaults..
# 
output_file=/tmp/test.html
image_height=180
image_gallery=${IMAGE_GALLERY:-$PWD}
image_path=${IAMGE_PATH:-$PWD}
image_gallery_input=$image_path/gallery

# Parse the command line options
ARGS=$(getopt -o dh:H -l "debug,height:,help,version" -- "$@")
eval set -- "$ARGS"
while true; do
        case "$1" in
        -d|--debug)
                _DEBUG=true
                shift
                ;;
        -h|--height)
                shift
                image_height=$arg
                shift
                ;;
        -H|--help)
                echo "$HELP"
                exit 0
                ;;
        --version)
                echo $VERSION
                exit 0
                ;;
        --)
                shift
                break 
                ;;
        *) 
                break 
                ;;
        esac
done

loop_files() {
        local directory=$1
        # list all markdown files
        for file in $(find $directory -name '*.md')
        do
                _debug "Process file $file"
                # recursively call this scrip for each file
                $0 $file
        done
        exit 0
}

# work on all files from the gallery input files
if [[ $# -eq 0  ]] 
then
        loop_files $image_gallery_input
fi

input=$1
test -d "$input" && loop_files $input

# look for the input file in the gallery/
input_file=$input
test -f $input_file || _error "$input_file input file missing"
_debug "Read input from $input_file"

# corresponding output file
output_file=${input_file%.md}.html
# create the output directory if missing
output_dir=$(dirname $output_file)
test -d $output_dir || mkdir -pv $output_dir
echo "Writing to $output_file"

##
## HTML document beginning
##
cat > $output_file <<EOF
<html>
<head>
<style>

  h1 { 
    width: 100%;
  }

  a { 
    color: rgba(0, 27, 164, 0.8);
    text-decoration: none;
    font-size: 0.6em;
  }

  hr {
    border-top: 3px solid whitesmoke;
    border-bottom: 0px;
  }

  div.gallery {
    width:100%;
    display:flex;
    flex-flow: row wrap;
  }
  div.box {
    border-radius: 5px;
    text-align: center;
    flex-basis: 5%;
  }
  div.box img {
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    background-color: none;
    margin: 0.5em;
    height: $image_height;
  }
  div.box div.text {
    margin-bottom: 0.5em;
  }
</style>
</head>
<body>
EOF

div_open() {
        if ! $div_gallery
        then
                echo "<div class=gallery>" >> $output_file
                div_gallery=true
        fi
}

div_close() {
        if $div_gallery
        then
                echo "</div>" >> $output_file
                div_gallery=false
        fi
}

div_gallery=false
# read the input_file line by line
while read -r line
do
        if [[ "$line" =~ ^[[:space:]]*$ ]]
        then
                div_close
        # first level headers
        elif [[ "$line" =~ ^#\ .* ]]
        then
                div_close
                header=$(echo "$line" | cut -d' ' -f2)
                # include a link...
                echo "<h1>$header</h1>" >> $output_file
        elif [[ "$line" =~ ^##\ .* ]]
        then
                div_close
                header=$(echo "$line" | cut -d' ' -f2)
                echo "<h2>$header</h2>" >> $output_file
        elif [[ "$line" =~ ^###\ .* ]]
        then
                div_close
                header=$(echo "$line" | cut -d' ' -f2)
                echo "<h3>$header</h3>" >> $output_file
        else
                div_open

                # second column references an example image 
                image=$(echo "$line" | cut -d' ' -f1)
                image_path="$image_path/$image"
                image_dir=$(echo "$image" | cut -d'/' -f1)
                test -d $image_dir/.thumb || mkdir $image_dir/.thumb
                image_name=$(echo "$image" | cut -d'/' -f2)
                image_thumb="$image_path/$image_dir/.thumb/$image_name"
                image_html="<img src=\"$image_thumb\"/>"
                
                # check if the thumbnail image exists
                if [ -e $image_thumb ]
                then
                        _debug "$image_thumb found"
                else
                        echo 
                        # install ImageMagick to create thumbnails
                        convert -quality 100 -thumbnail $(($image_height * 2)) $image_path $image_thumb
                        _debug "$image_thumb created"
                fi


                # check for a second column behind an image
                columns=$(echo "$line" | awk '{print NF}')

                reference=
                if [[ $columns -eq 2 ]]
                then
                        reference=$(echo "$line" | tr -s ' ' | cut -d' ' -f2)
                        echo -e "\t\t<div class=box><a href=$reference.html target=_blank rel=noopener>$image_html<a><div class=text>$reference</div></div>" >> $output_file
                else
                        href="<a href=$image_path target=_blank rel=noopener>$image_html</a>"
                        # add the image and reference to the HTML document
                        echo -e "\t\t<div class=box>$href</div>" >> $output_file

                fi

        fi

done < $input_file


##
## HTML document ending
##
cat >> $output_file <<EOF
</body>
</html>
EOF

exit 0


