#!/usr/bin/env ruby
# encoding: UTF-8
#
# Copyright 2012-2019 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'ostruct'
require 'getoptlong' 
require 'json'
require 'fileutils'

version = 0.21

exec_name = File.split(__FILE__)[-1]

HELP = <<EOF
Synopsis
========

#{exec_name}: Check the status of Git repositories.

Usage
-----

#{exec_name} [COMMAND] [OPTIONS]

  COMMAND:
    init    Create missing directories, initialize 
            an empty Git repository and add all
            defined remote repositories.
    status  Show working tree status (modified and
            untracked files). Indicates if local
            commits are not pushed to remotes yet.

Options
-------

  --config, -c PATH
    Path to configuration file.
  --version, -V
    Print script version.
  --help, -h
    Show this help information.
  --debug, -d
    Include stacktraces in case of errors.

Configuration
-------------

#{exec_name} expects a list of directories and remote 
Git repositories. Absolute and relative paths are 
supported, as well has tilde (~) to refere to the user
home-directory. 

Lines with at least a single leading white space define
corresponding Git remote repositories of a directory.
These lines have the notation <name> followed by <url>.

Examples for the notation of a configuration file:

/path/to/the/repository
  origin git://host.org/project.git
  backup ssh://user@host.org/project.git
/path/to/another/repository
  name ~/existing/repo
~/path/to/yet/another/repo
  foobar ssh://user@host.org/foobar.git
realitve/path/to/repository
  deploy git://fqdn.com/name.git

Configuration files are read in the following order:

1. set by option '-c PATH'
2. $PWD/.gitrepos
3. $HOME/.gitrepos
EOF

class GitRepos

  SYMBOL = { :ahead => '↑', :behind => '↓' }

  def initialize(config_file)
    config_file = File.expand_path(config_file)
    @config = Hash.new
    if File.exist? config_file
      read_configuration(config_file)
    else 
      raise("Configuration not existing: #{config_file}")
    end 
  end

  def setup
    @config.each_pair do |path,repos|
      FileUtils.mkdir_p(path)
      repos.each_pair do |name,uri|
        FileUtils.cd(path)
        system('git init') unless File.exist? "#{path}/.git"
        system("git remote add #{name} #{uri} > /dev/null 2>&1")
        if $?.exitstatus.eql? 0
          $stdout.puts "Adding Git remote '#{name}' in #{path}"
        end
      end 
    end
  end

  def status()
    @config.keys.sort.each do |path|
      repos = @config[path]
      if File.directory? path
        # change the working directory 
        FileUtils.cd(path)
        remotes = Array.new
        # list all remote Git repositories
        `git branch -r`.split("\n").each do |remote|
          remote = remote.split(' ')[0]
          ahead = `git rev-list #{remote}..HEAD`
          ahead = ahead.empty? ? 0 : ahead.split.length 
          # if local HEAD is ahead of a remote branch
          remotes << "#{SYMBOL[:ahead]}#{ahead} #{remote}" if ahead.to_i > 0
        end
        status = 'git status -s'
        status_empty = `#{status}`.empty?
        show = true unless status_empty
        show = true unless remotes.empty?
        $stdout.puts "-- #{path.gsub(%r[^#{ENV['HOME']}],'~')}" if show
        $stdout.puts remotes.join("\n") unless remotes.empty?
        system("#{status} -b") unless status_empty
      end
    end
  end

  private



  def read_configuration(file)
    path = String.new
    File.readlines(file).each do |line|
      case line
      # relative paths
      when /^[\.\w]+\/.*/
        config_path = File.dirname(File.expand_path(file))
        path = File.join(config_path,line.chomp)
        @config[path] = Hash.new
      # absolute paths
      when /^[~\/].*/
        path = line.chomp
        path = File.expand_path path
        @config[path] = Hash.new
      # repositories
      when /[a-zA-Z]+ .*/
        line = line.split
        if line.length.eql? 2
          # did we see a path configuration before a repository list
          unless path.empty? 
            @config[path][line[0]] = line[1].chomp
          end
        end
      end
    end
  end
end

begin

  options = OpenStruct.new
  options.debug = false
  options.verbose = false
  options.config = String.new
  
  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--verbose','-v',GetoptLong::NO_ARGUMENT],
    ['--version','-V',GetoptLong::NO_ARGUMENT],
    ['--config','-c',GetoptLong::REQUIRED_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $DEBUG = true
      options.debug = true
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--version'
      $stdout.puts version
      exit 0
    when '--verbose'
      options.verbose = true
    when '--config'
      if File.exists? arg
        options.config = File.expand_path(arg)
      else
        raise("Configuration file #{arg} not found!")
      end
    end
  end

  command = ARGV[0] || raise('No command given!')
  if options.config.empty?
    config = "#{ENV['PWD']}/.gitrepos"
    unless File.exist? config
      config = "#{ENV['HOME']}/.gitrepos"
      unless File.exist? config
        raise('No configuration file defined!')
      end
    end
    options.config = File.expand_path config
    $stdout.puts "Reading configuration from #{options.config}" if options.verbose
  end

  repos = GitRepos.new(options.config)

  case command
  when 'init'
    repos.setup
  when 'status'
    repos.status  
  else
    raise("#{command} not supported!")
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
